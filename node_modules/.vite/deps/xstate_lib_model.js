import {
  __commonJS
} from "./chunk-USJHI7ER.js";

// node_modules/xstate/lib/_virtual/_tslib.js
var require_tslib = __commonJS({
  "node_modules/xstate/lib/_virtual/_tslib.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.__assign = function() {
      exports.__assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return exports.__assign.apply(this, arguments);
    };
    function __rest(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    }
    function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    }
    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    }
    exports.__read = __read;
    exports.__rest = __rest;
    exports.__spreadArray = __spreadArray;
    exports.__values = __values;
  }
});

// node_modules/xstate/lib/types.js
var require_types = __commonJS({
  "node_modules/xstate/lib/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionTypes = void 0;
    (function(ActionTypes) {
      ActionTypes["Start"] = "xstate.start";
      ActionTypes["Stop"] = "xstate.stop";
      ActionTypes["Raise"] = "xstate.raise";
      ActionTypes["Send"] = "xstate.send";
      ActionTypes["Cancel"] = "xstate.cancel";
      ActionTypes["NullEvent"] = "";
      ActionTypes["Assign"] = "xstate.assign";
      ActionTypes["After"] = "xstate.after";
      ActionTypes["DoneState"] = "done.state";
      ActionTypes["DoneInvoke"] = "done.invoke";
      ActionTypes["Log"] = "xstate.log";
      ActionTypes["Init"] = "xstate.init";
      ActionTypes["Invoke"] = "xstate.invoke";
      ActionTypes["ErrorExecution"] = "error.execution";
      ActionTypes["ErrorCommunication"] = "error.communication";
      ActionTypes["ErrorPlatform"] = "error.platform";
      ActionTypes["ErrorCustom"] = "xstate.error";
      ActionTypes["Update"] = "xstate.update";
      ActionTypes["Pure"] = "xstate.pure";
      ActionTypes["Choose"] = "xstate.choose";
    })(exports.ActionTypes || (exports.ActionTypes = {}));
    exports.SpecialTargets = void 0;
    (function(SpecialTargets) {
      SpecialTargets["Parent"] = "#_parent";
      SpecialTargets["Internal"] = "#_internal";
    })(exports.SpecialTargets || (exports.SpecialTargets = {}));
  }
});

// node_modules/xstate/lib/actionTypes.js
var require_actionTypes = __commonJS({
  "node_modules/xstate/lib/actionTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var types = require_types();
    var start = types.ActionTypes.Start;
    var stop = types.ActionTypes.Stop;
    var raise = types.ActionTypes.Raise;
    var send = types.ActionTypes.Send;
    var cancel = types.ActionTypes.Cancel;
    var nullEvent = types.ActionTypes.NullEvent;
    var assign = types.ActionTypes.Assign;
    var after = types.ActionTypes.After;
    var doneState = types.ActionTypes.DoneState;
    var log = types.ActionTypes.Log;
    var init = types.ActionTypes.Init;
    var invoke = types.ActionTypes.Invoke;
    var errorExecution = types.ActionTypes.ErrorExecution;
    var errorPlatform = types.ActionTypes.ErrorPlatform;
    var error = types.ActionTypes.ErrorCustom;
    var update = types.ActionTypes.Update;
    var choose = types.ActionTypes.Choose;
    var pure = types.ActionTypes.Pure;
    exports.after = after;
    exports.assign = assign;
    exports.cancel = cancel;
    exports.choose = choose;
    exports.doneState = doneState;
    exports.error = error;
    exports.errorExecution = errorExecution;
    exports.errorPlatform = errorPlatform;
    exports.init = init;
    exports.invoke = invoke;
    exports.log = log;
    exports.nullEvent = nullEvent;
    exports.pure = pure;
    exports.raise = raise;
    exports.send = send;
    exports.start = start;
    exports.stop = stop;
    exports.update = update;
  }
});

// node_modules/xstate/lib/constants.js
var require_constants = __commonJS({
  "node_modules/xstate/lib/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var STATE_DELIMITER = ".";
    var EMPTY_ACTIVITY_MAP = {};
    var DEFAULT_GUARD_TYPE = "xstate.guard";
    var TARGETLESS_KEY = "";
    exports.DEFAULT_GUARD_TYPE = DEFAULT_GUARD_TYPE;
    exports.EMPTY_ACTIVITY_MAP = EMPTY_ACTIVITY_MAP;
    exports.STATE_DELIMITER = STATE_DELIMITER;
    exports.TARGETLESS_KEY = TARGETLESS_KEY;
  }
});

// node_modules/xstate/lib/environment.js
var require_environment = __commonJS({
  "node_modules/xstate/lib/environment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IS_PRODUCTION = false;
    exports.IS_PRODUCTION = IS_PRODUCTION;
  }
});

// node_modules/xstate/lib/utils.js
var require_utils = __commonJS({
  "node_modules/xstate/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var types = require_types();
    var actionTypes = require_actionTypes();
    var constants = require_constants();
    var environment = require_environment();
    var _a;
    function keys(value) {
      return Object.keys(value);
    }
    function matchesState(parentStateId, childStateId, delimiter) {
      if (delimiter === void 0) {
        delimiter = constants.STATE_DELIMITER;
      }
      var parentStateValue = toStateValue(parentStateId, delimiter);
      var childStateValue = toStateValue(childStateId, delimiter);
      if (isString(childStateValue)) {
        if (isString(parentStateValue)) {
          return childStateValue === parentStateValue;
        }
        return false;
      }
      if (isString(parentStateValue)) {
        return parentStateValue in childStateValue;
      }
      return Object.keys(parentStateValue).every(function(key) {
        if (!(key in childStateValue)) {
          return false;
        }
        return matchesState(parentStateValue[key], childStateValue[key]);
      });
    }
    function getEventType(event) {
      try {
        return isString(event) || typeof event === "number" ? "".concat(event) : event.type;
      } catch (e) {
        throw new Error("Events must be strings or objects with a string event.type property.");
      }
    }
    function getActionType(action) {
      try {
        return isString(action) || typeof action === "number" ? "".concat(action) : isFunction(action) ? action.name : action.type;
      } catch (e) {
        throw new Error("Actions must be strings or objects with a string action.type property.");
      }
    }
    function toStatePath(stateId, delimiter) {
      try {
        if (isArray(stateId)) {
          return stateId;
        }
        return stateId.toString().split(delimiter);
      } catch (e) {
        throw new Error("'".concat(stateId, "' is not a valid state path."));
      }
    }
    function isStateLike(state) {
      return typeof state === "object" && "value" in state && "context" in state && "event" in state && "_event" in state;
    }
    function toStateValue(stateValue, delimiter) {
      if (isStateLike(stateValue)) {
        return stateValue.value;
      }
      if (isArray(stateValue)) {
        return pathToStateValue(stateValue);
      }
      if (typeof stateValue !== "string") {
        return stateValue;
      }
      var statePath = toStatePath(stateValue, delimiter);
      return pathToStateValue(statePath);
    }
    function pathToStateValue(statePath) {
      if (statePath.length === 1) {
        return statePath[0];
      }
      var value = {};
      var marker = value;
      for (var i = 0; i < statePath.length - 1; i++) {
        if (i === statePath.length - 2) {
          marker[statePath[i]] = statePath[i + 1];
        } else {
          marker[statePath[i]] = {};
          marker = marker[statePath[i]];
        }
      }
      return value;
    }
    function mapValues(collection, iteratee) {
      var result = {};
      var collectionKeys = Object.keys(collection);
      for (var i = 0; i < collectionKeys.length; i++) {
        var key = collectionKeys[i];
        result[key] = iteratee(collection[key], key, collection, i);
      }
      return result;
    }
    function mapFilterValues(collection, iteratee, predicate) {
      var e_1, _a2;
      var result = {};
      try {
        for (var _b = _tslib.__values(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var item = collection[key];
          if (!predicate(item)) {
            continue;
          }
          result[key] = iteratee(item, key, collection);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return result;
    }
    var path = function(props) {
      return function(object) {
        var e_2, _a2;
        var result = object;
        try {
          for (var props_1 = _tslib.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
            var prop = props_1_1.value;
            result = result[prop];
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (props_1_1 && !props_1_1.done && (_a2 = props_1.return))
              _a2.call(props_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        return result;
      };
    };
    function nestedPath(props, accessorProp) {
      return function(object) {
        var e_3, _a2;
        var result = object;
        try {
          for (var props_2 = _tslib.__values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
            var prop = props_2_1.value;
            result = result[accessorProp][prop];
          }
        } catch (e_3_1) {
          e_3 = {
            error: e_3_1
          };
        } finally {
          try {
            if (props_2_1 && !props_2_1.done && (_a2 = props_2.return))
              _a2.call(props_2);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return result;
      };
    }
    function toStatePaths(stateValue) {
      if (!stateValue) {
        return [[]];
      }
      if (isString(stateValue)) {
        return [[stateValue]];
      }
      var result = flatten(Object.keys(stateValue).map(function(key) {
        var subStateValue = stateValue[key];
        if (typeof subStateValue !== "string" && (!subStateValue || !Object.keys(subStateValue).length)) {
          return [[key]];
        }
        return toStatePaths(stateValue[key]).map(function(subPath) {
          return [key].concat(subPath);
        });
      }));
      return result;
    }
    function pathsToStateValue(paths) {
      var e_4, _a2;
      var result = {};
      if (paths && paths.length === 1 && paths[0].length === 1) {
        return paths[0][0];
      }
      try {
        for (var paths_1 = _tslib.__values(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
          var currentPath = paths_1_1.value;
          var marker = result;
          for (var i = 0; i < currentPath.length; i++) {
            var subPath = currentPath[i];
            if (i === currentPath.length - 2) {
              marker[subPath] = currentPath[i + 1];
              break;
            }
            marker[subPath] = marker[subPath] || {};
            marker = marker[subPath];
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (paths_1_1 && !paths_1_1.done && (_a2 = paths_1.return))
            _a2.call(paths_1);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return result;
    }
    function flatten(array) {
      var _a2;
      return (_a2 = []).concat.apply(_a2, _tslib.__spreadArray([], _tslib.__read(array), false));
    }
    function toArrayStrict(value) {
      if (isArray(value)) {
        return value;
      }
      return [value];
    }
    function toArray(value) {
      if (value === void 0) {
        return [];
      }
      return toArrayStrict(value);
    }
    function mapContext(mapper, context, _event) {
      var e_5, _a2;
      if (isFunction(mapper)) {
        return mapper(context, _event.data);
      }
      var result = {};
      try {
        for (var _b = _tslib.__values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var subMapper = mapper[key];
          if (isFunction(subMapper)) {
            result[key] = subMapper(context, _event.data);
          } else {
            result[key] = subMapper;
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_5)
            throw e_5.error;
        }
      }
      return result;
    }
    function isBuiltInEvent(eventType) {
      return /^(done|error)\./.test(eventType);
    }
    function isPromiseLike(value) {
      if (value instanceof Promise) {
        return true;
      }
      if (value !== null && (isFunction(value) || typeof value === "object") && isFunction(value.then)) {
        return true;
      }
      return false;
    }
    function isBehavior(value) {
      return value !== null && typeof value === "object" && "transition" in value && typeof value.transition === "function";
    }
    function partition(items, predicate) {
      var e_6, _a2;
      var _b = _tslib.__read([[], []], 2), truthy = _b[0], falsy = _b[1];
      try {
        for (var items_1 = _tslib.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
          var item = items_1_1.value;
          if (predicate(item)) {
            truthy.push(item);
          } else {
            falsy.push(item);
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (items_1_1 && !items_1_1.done && (_a2 = items_1.return))
            _a2.call(items_1);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      return [truthy, falsy];
    }
    function updateHistoryStates(hist, stateValue) {
      return mapValues(hist.states, function(subHist, key) {
        if (!subHist) {
          return void 0;
        }
        var subStateValue = (isString(stateValue) ? void 0 : stateValue[key]) || (subHist ? subHist.current : void 0);
        if (!subStateValue) {
          return void 0;
        }
        return {
          current: subStateValue,
          states: updateHistoryStates(subHist, subStateValue)
        };
      });
    }
    function updateHistoryValue(hist, stateValue) {
      return {
        current: stateValue,
        states: updateHistoryStates(hist, stateValue)
      };
    }
    function updateContext(context, _event, assignActions, state) {
      if (!environment.IS_PRODUCTION) {
        exports.warn(!!context, "Attempting to update undefined context");
      }
      var updatedContext = context ? assignActions.reduce(function(acc, assignAction) {
        var e_7, _a2;
        var assignment = assignAction.assignment;
        var meta = {
          state,
          action: assignAction,
          _event
        };
        var partialUpdate = {};
        if (isFunction(assignment)) {
          partialUpdate = assignment(acc, _event.data, meta);
        } else {
          try {
            for (var _b = _tslib.__values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var key = _c.value;
              var propAssignment = assignment[key];
              partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
            }
          } catch (e_7_1) {
            e_7 = {
              error: e_7_1
            };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_7)
                throw e_7.error;
            }
          }
        }
        return Object.assign({}, acc, partialUpdate);
      }, context) : context;
      return updatedContext;
    }
    exports.warn = function() {
    };
    if (!environment.IS_PRODUCTION) {
      exports.warn = function(condition, message) {
        var error = condition instanceof Error ? condition : void 0;
        if (!error && condition) {
          return;
        }
        if (console !== void 0) {
          var args = ["Warning: ".concat(message)];
          if (error) {
            args.push(error);
          }
          console.warn.apply(console, args);
        }
      };
    }
    function isArray(value) {
      return Array.isArray(value);
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isString(value) {
      return typeof value === "string";
    }
    function toGuard(condition, guardMap) {
      if (!condition) {
        return void 0;
      }
      if (isString(condition)) {
        return {
          type: constants.DEFAULT_GUARD_TYPE,
          name: condition,
          predicate: guardMap ? guardMap[condition] : void 0
        };
      }
      if (isFunction(condition)) {
        return {
          type: constants.DEFAULT_GUARD_TYPE,
          name: condition.name,
          predicate: condition
        };
      }
      return condition;
    }
    function isObservable(value) {
      try {
        return "subscribe" in value && isFunction(value.subscribe);
      } catch (e) {
        return false;
      }
    }
    var symbolObservable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    var interopSymbols = (_a = {}, _a[symbolObservable] = function() {
      return this;
    }, _a[Symbol.observable] = function() {
      return this;
    }, _a);
    function isMachine(value) {
      return !!value && "__xstatenode" in value;
    }
    function isActor(value) {
      return !!value && typeof value.send === "function";
    }
    var uniqueId = function() {
      var currentId = 0;
      return function() {
        currentId++;
        return currentId.toString(16);
      };
    }();
    function toEventObject(event, payload) {
      if (isString(event) || typeof event === "number") {
        return _tslib.__assign({
          type: event
        }, payload);
      }
      return event;
    }
    function toSCXMLEvent(event, scxmlEvent) {
      if (!isString(event) && "$$type" in event && event.$$type === "scxml") {
        return event;
      }
      var eventObject = toEventObject(event);
      return _tslib.__assign({
        name: eventObject.type,
        data: eventObject,
        $$type: "scxml",
        type: "external"
      }, scxmlEvent);
    }
    function toTransitionConfigArray(event, configLike) {
      var transitions = toArrayStrict(configLike).map(function(transitionLike) {
        if (typeof transitionLike === "undefined" || typeof transitionLike === "string" || isMachine(transitionLike)) {
          return {
            target: transitionLike,
            event
          };
        }
        return _tslib.__assign(_tslib.__assign({}, transitionLike), {
          event
        });
      });
      return transitions;
    }
    function normalizeTarget(target) {
      if (target === void 0 || target === constants.TARGETLESS_KEY) {
        return void 0;
      }
      return toArray(target);
    }
    function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
      if (!environment.IS_PRODUCTION) {
        var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : "";
        if (originalError === currentError) {
          console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
        } else {
          var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : "";
          console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
        }
      }
    }
    function evaluateGuard(machine, guard, context, _event, state) {
      var guards = machine.options.guards;
      var guardMeta = {
        state,
        cond: guard,
        _event
      };
      if (guard.type === constants.DEFAULT_GUARD_TYPE) {
        return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
      }
      var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];
      if (!condFn) {
        throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
      }
      return condFn(context, _event.data, guardMeta);
    }
    function toInvokeSource(src) {
      if (typeof src === "string") {
        return {
          type: src
        };
      }
      return src;
    }
    function toObserver(nextHandler, errorHandler, completionHandler) {
      var noop = function() {
      };
      var isObserver = typeof nextHandler === "object";
      var self = isObserver ? nextHandler : null;
      return {
        next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
        error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
        complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
      };
    }
    function createInvokeId(stateNodeId, index) {
      return "".concat(stateNodeId, ":invocation[").concat(index, "]");
    }
    function isRaisableAction(action) {
      return (action.type === actionTypes.raise || action.type === actionTypes.send && action.to === types.SpecialTargets.Internal) && typeof action.delay !== "number";
    }
    exports.createInvokeId = createInvokeId;
    exports.evaluateGuard = evaluateGuard;
    exports.flatten = flatten;
    exports.getActionType = getActionType;
    exports.getEventType = getEventType;
    exports.interopSymbols = interopSymbols;
    exports.isActor = isActor;
    exports.isArray = isArray;
    exports.isBehavior = isBehavior;
    exports.isBuiltInEvent = isBuiltInEvent;
    exports.isFunction = isFunction;
    exports.isMachine = isMachine;
    exports.isObservable = isObservable;
    exports.isPromiseLike = isPromiseLike;
    exports.isRaisableAction = isRaisableAction;
    exports.isStateLike = isStateLike;
    exports.isString = isString;
    exports.keys = keys;
    exports.mapContext = mapContext;
    exports.mapFilterValues = mapFilterValues;
    exports.mapValues = mapValues;
    exports.matchesState = matchesState;
    exports.nestedPath = nestedPath;
    exports.normalizeTarget = normalizeTarget;
    exports.partition = partition;
    exports.path = path;
    exports.pathToStateValue = pathToStateValue;
    exports.pathsToStateValue = pathsToStateValue;
    exports.reportUnhandledExceptionOnInvocation = reportUnhandledExceptionOnInvocation;
    exports.symbolObservable = symbolObservable;
    exports.toArray = toArray;
    exports.toArrayStrict = toArrayStrict;
    exports.toEventObject = toEventObject;
    exports.toGuard = toGuard;
    exports.toInvokeSource = toInvokeSource;
    exports.toObserver = toObserver;
    exports.toSCXMLEvent = toSCXMLEvent;
    exports.toStatePath = toStatePath;
    exports.toStatePaths = toStatePaths;
    exports.toStateValue = toStateValue;
    exports.toTransitionConfigArray = toTransitionConfigArray;
    exports.uniqueId = uniqueId;
    exports.updateContext = updateContext;
    exports.updateHistoryStates = updateHistoryStates;
    exports.updateHistoryValue = updateHistoryValue;
  }
});

// node_modules/xstate/lib/actions.js
var require_actions = __commonJS({
  "node_modules/xstate/lib/actions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var types = require_types();
    var actionTypes = require_actionTypes();
    var utils = require_utils();
    var environment = require_environment();
    var initEvent = utils.toSCXMLEvent({
      type: actionTypes.init
    });
    function getActionFunction(actionType, actionFunctionMap) {
      return actionFunctionMap ? actionFunctionMap[actionType] || void 0 : void 0;
    }
    function toActionObject(action, actionFunctionMap) {
      var actionObject;
      if (utils.isString(action) || typeof action === "number") {
        var exec = getActionFunction(action, actionFunctionMap);
        if (utils.isFunction(exec)) {
          actionObject = {
            type: action,
            exec
          };
        } else if (exec) {
          actionObject = exec;
        } else {
          actionObject = {
            type: action,
            exec: void 0
          };
        }
      } else if (utils.isFunction(action)) {
        actionObject = {
          // Convert action to string if unnamed
          type: action.name || action.toString(),
          exec: action
        };
      } else {
        var exec = getActionFunction(action.type, actionFunctionMap);
        if (utils.isFunction(exec)) {
          actionObject = _tslib.__assign(_tslib.__assign({}, action), {
            exec
          });
        } else if (exec) {
          var actionType = exec.type || action.type;
          actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {
            type: actionType
          });
        } else {
          actionObject = action;
        }
      }
      return actionObject;
    }
    var toActionObjects = function(action, actionFunctionMap) {
      if (!action) {
        return [];
      }
      var actions = utils.isArray(action) ? action : [action];
      return actions.map(function(subAction) {
        return toActionObject(subAction, actionFunctionMap);
      });
    };
    function toActivityDefinition(action) {
      var actionObject = toActionObject(action);
      return _tslib.__assign(_tslib.__assign({
        id: utils.isString(action) ? action : actionObject.id
      }, actionObject), {
        type: actionObject.type
      });
    }
    function raise(event, options) {
      return {
        type: actionTypes.raise,
        event: typeof event === "function" ? event : utils.toEventObject(event),
        delay: options ? options.delay : void 0,
        id: options === null || options === void 0 ? void 0 : options.id
      };
    }
    function resolveRaise(action, ctx, _event, delaysMap) {
      var meta = {
        _event
      };
      var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
      var resolvedDelay;
      if (utils.isString(action.delay)) {
        var configDelay = delaysMap && delaysMap[action.delay];
        resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
      } else {
        resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
      }
      return _tslib.__assign(_tslib.__assign({}, action), {
        type: actionTypes.raise,
        _event: resolvedEvent,
        delay: resolvedDelay
      });
    }
    function send(event, options) {
      return {
        to: options ? options.to : void 0,
        type: actionTypes.send,
        event: utils.isFunction(event) ? event : utils.toEventObject(event),
        delay: options ? options.delay : void 0,
        // TODO: don't auto-generate IDs here like that
        // there is too big chance of the ID collision
        id: options && options.id !== void 0 ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)
      };
    }
    function resolveSend(action, ctx, _event, delaysMap) {
      var meta = {
        _event
      };
      var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
      var resolvedDelay;
      if (utils.isString(action.delay)) {
        var configDelay = delaysMap && delaysMap[action.delay];
        resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
      } else {
        resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
      }
      var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
      return _tslib.__assign(_tslib.__assign({}, action), {
        to: resolvedTarget,
        _event: resolvedEvent,
        event: resolvedEvent.data,
        delay: resolvedDelay
      });
    }
    function sendParent(event, options) {
      return send(event, _tslib.__assign(_tslib.__assign({}, options), {
        to: types.SpecialTargets.Parent
      }));
    }
    function sendTo(actor, event, options) {
      return send(event, _tslib.__assign(_tslib.__assign({}, options), {
        to: actor
      }));
    }
    function sendUpdate() {
      return sendParent(actionTypes.update);
    }
    function respond(event, options) {
      return send(event, _tslib.__assign(_tslib.__assign({}, options), {
        to: function(_, __, _a) {
          var _event = _a._event;
          return _event.origin;
        }
      }));
    }
    var defaultLogExpr = function(context, event) {
      return {
        context,
        event
      };
    };
    function log(expr, label) {
      if (expr === void 0) {
        expr = defaultLogExpr;
      }
      return {
        type: actionTypes.log,
        label,
        expr
      };
    }
    var resolveLog = function(action, ctx, _event) {
      return _tslib.__assign(_tslib.__assign({}, action), {
        value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {
          _event
        })
      });
    };
    var cancel = function(sendId) {
      return {
        type: actionTypes.cancel,
        sendId
      };
    };
    function start(activity) {
      var activityDef = toActivityDefinition(activity);
      return {
        type: types.ActionTypes.Start,
        activity: activityDef,
        exec: void 0
      };
    }
    function stop(actorRef) {
      var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
      return {
        type: types.ActionTypes.Stop,
        activity,
        exec: void 0
      };
    }
    function resolveStop(action, context, _event) {
      var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;
      var resolvedActorRef = typeof actorRefOrString === "string" ? {
        id: actorRefOrString
      } : actorRefOrString;
      var actionObject = {
        type: types.ActionTypes.Stop,
        activity: resolvedActorRef
      };
      return actionObject;
    }
    var assign = function(assignment) {
      return {
        type: actionTypes.assign,
        assignment
      };
    };
    function isActionObject(action) {
      return typeof action === "object" && "type" in action;
    }
    function after(delayRef, id) {
      var idSuffix = id ? "#".concat(id) : "";
      return "".concat(types.ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
    }
    function done(id, data) {
      var type = "".concat(types.ActionTypes.DoneState, ".").concat(id);
      var eventObject = {
        type,
        data
      };
      eventObject.toString = function() {
        return type;
      };
      return eventObject;
    }
    function doneInvoke(id, data) {
      var type = "".concat(types.ActionTypes.DoneInvoke, ".").concat(id);
      var eventObject = {
        type,
        data
      };
      eventObject.toString = function() {
        return type;
      };
      return eventObject;
    }
    function error(id, data) {
      var type = "".concat(types.ActionTypes.ErrorPlatform, ".").concat(id);
      var eventObject = {
        type,
        data
      };
      eventObject.toString = function() {
        return type;
      };
      return eventObject;
    }
    function pure(getActions) {
      return {
        type: types.ActionTypes.Pure,
        get: getActions
      };
    }
    function forwardTo(target, options) {
      if (!environment.IS_PRODUCTION && (!target || typeof target === "function")) {
        var originalTarget_1 = target;
        target = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var resolvedTarget = typeof originalTarget_1 === "function" ? originalTarget_1.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false)) : originalTarget_1;
          if (!resolvedTarget) {
            throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
          }
          return resolvedTarget;
        };
      }
      return send(function(_, event) {
        return event;
      }, _tslib.__assign(_tslib.__assign({}, options), {
        to: target
      }));
    }
    function escalate(errorData, options) {
      return sendParent(function(context, event, meta) {
        return {
          type: actionTypes.error,
          data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData
        };
      }, _tslib.__assign(_tslib.__assign({}, options), {
        to: types.SpecialTargets.Parent
      }));
    }
    function choose(conds) {
      return {
        type: types.ActionTypes.Choose,
        conds
      };
    }
    var pluckAssigns = function(actionBlocks) {
      var e_1, _a;
      var assignActions = [];
      try {
        for (var actionBlocks_1 = _tslib.__values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
          var block = actionBlocks_1_1.value;
          var i = 0;
          while (i < block.actions.length) {
            if (block.actions[i].type === actionTypes.assign) {
              assignActions.push(block.actions[i]);
              block.actions.splice(i, 1);
              continue;
            }
            i++;
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return))
            _a.call(actionBlocks_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return assignActions;
    };
    function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
      if (preserveActionOrder === void 0) {
        preserveActionOrder = false;
      }
      var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
      var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;
      var preservedContexts = preserveActionOrder ? [currentContext] : void 0;
      var deferredToBlockEnd = [];
      function handleAction(blockType, actionObject) {
        var _a;
        switch (actionObject.type) {
          case actionTypes.raise: {
            var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);
            if (predictableExec && typeof raisedAction.delay === "number") {
              predictableExec(raisedAction, updatedContext, _event);
            }
            return raisedAction;
          }
          case actionTypes.send:
            var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays);
            if (!environment.IS_PRODUCTION) {
              var configuredDelay = actionObject.delay;
              utils.warn(
                !utils.isString(configuredDelay) || typeof sendAction.delay === "number",
                // tslint:disable-next-line:max-line-length
                "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'")
              );
            }
            if (predictableExec && sendAction.to !== types.SpecialTargets.Internal) {
              if (blockType === "entry") {
                deferredToBlockEnd.push(sendAction);
              } else {
                predictableExec(sendAction, updatedContext, _event);
              }
            }
            return sendAction;
          case actionTypes.log: {
            var resolved = resolveLog(actionObject, updatedContext, _event);
            predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
            return resolved;
          }
          case actionTypes.choose: {
            var chooseAction = actionObject;
            var matchedActions = (_a = chooseAction.conds.find(function(condition) {
              var guard = utils.toGuard(condition.cond, machine.options.guards);
              return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : void 0);
            })) === null || _a === void 0 ? void 0 : _a.actions;
            if (!matchedActions) {
              return [];
            }
            var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [{
              type: blockType,
              actions: toActionObjects(utils.toArray(matchedActions), machine.options.actions)
            }], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];
            updatedContext = resolvedContextFromChoose;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromChoose;
          }
          case actionTypes.pure: {
            var matchedActions = actionObject.get(updatedContext, _event.data);
            if (!matchedActions) {
              return [];
            }
            var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [{
              type: blockType,
              actions: toActionObjects(utils.toArray(matchedActions), machine.options.actions)
            }], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];
            updatedContext = resolvedContext;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromPure;
          }
          case actionTypes.stop: {
            var resolved = resolveStop(actionObject, updatedContext, _event);
            predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);
            return resolved;
          }
          case actionTypes.assign: {
            updatedContext = utils.updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : void 0);
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            break;
          }
          default:
            var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
            var exec_1 = resolvedActionObject.exec;
            if (predictableExec) {
              predictableExec(resolvedActionObject, updatedContext, _event);
            } else if (exec_1 && preservedContexts) {
              var contextIndex_1 = preservedContexts.length - 1;
              var wrapped = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {
                exec: function(_ctx) {
                  var args = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                  }
                  exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));
                }
              });
              resolvedActionObject = wrapped;
            }
            return resolvedActionObject;
        }
      }
      function processBlock(block) {
        var e_2, _a;
        var resolvedActions2 = [];
        try {
          for (var _b = _tslib.__values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
            var action = _c.value;
            var resolved = handleAction(block.type, action);
            if (resolved) {
              resolvedActions2 = resolvedActions2.concat(resolved);
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        deferredToBlockEnd.forEach(function(action2) {
          predictableExec(action2, updatedContext, _event);
        });
        deferredToBlockEnd.length = 0;
        return resolvedActions2;
      }
      var resolvedActions = utils.flatten(actionBlocks.map(processBlock));
      return [resolvedActions, updatedContext];
    }
    exports.actionTypes = actionTypes;
    exports.after = after;
    exports.assign = assign;
    exports.cancel = cancel;
    exports.choose = choose;
    exports.done = done;
    exports.doneInvoke = doneInvoke;
    exports.error = error;
    exports.escalate = escalate;
    exports.forwardTo = forwardTo;
    exports.getActionFunction = getActionFunction;
    exports.initEvent = initEvent;
    exports.isActionObject = isActionObject;
    exports.log = log;
    exports.pure = pure;
    exports.raise = raise;
    exports.resolveActions = resolveActions;
    exports.resolveLog = resolveLog;
    exports.resolveRaise = resolveRaise;
    exports.resolveSend = resolveSend;
    exports.resolveStop = resolveStop;
    exports.respond = respond;
    exports.send = send;
    exports.sendParent = sendParent;
    exports.sendTo = sendTo;
    exports.sendUpdate = sendUpdate;
    exports.start = start;
    exports.stop = stop;
    exports.toActionObject = toActionObject;
    exports.toActionObjects = toActionObjects;
    exports.toActivityDefinition = toActivityDefinition;
  }
});

// node_modules/xstate/lib/stateUtils.js
var require_stateUtils = __commonJS({
  "node_modules/xstate/lib/stateUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var utils = require_utils();
    var isLeafNode = function(stateNode) {
      return stateNode.type === "atomic" || stateNode.type === "final";
    };
    function getAllChildren(stateNode) {
      return Object.keys(stateNode.states).map(function(key) {
        return stateNode.states[key];
      });
    }
    function getChildren(stateNode) {
      return getAllChildren(stateNode).filter(function(sn) {
        return sn.type !== "history";
      });
    }
    function getAllStateNodes(stateNode) {
      var stateNodes = [stateNode];
      if (isLeafNode(stateNode)) {
        return stateNodes;
      }
      return stateNodes.concat(utils.flatten(getChildren(stateNode).map(getAllStateNodes)));
    }
    function getConfiguration(prevStateNodes, stateNodes) {
      var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
      var prevConfiguration = new Set(prevStateNodes);
      var prevAdjList = getAdjList(prevConfiguration);
      var configuration = new Set(stateNodes);
      try {
        for (var configuration_1 = _tslib.__values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
          var s = configuration_1_1.value;
          var m = s.parent;
          while (m && !configuration.has(m)) {
            configuration.add(m);
            m = m.parent;
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return))
            _a.call(configuration_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var adjList = getAdjList(configuration);
      try {
        for (var configuration_2 = _tslib.__values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
          var s = configuration_2_1.value;
          if (s.type === "compound" && (!adjList.get(s) || !adjList.get(s).length)) {
            if (prevAdjList.get(s)) {
              prevAdjList.get(s).forEach(function(sn) {
                return configuration.add(sn);
              });
            } else {
              s.initialStateNodes.forEach(function(sn) {
                return configuration.add(sn);
              });
            }
          } else {
            if (s.type === "parallel") {
              try {
                for (var _e = (e_3 = void 0, _tslib.__values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var child = _f.value;
                  if (!configuration.has(child)) {
                    configuration.add(child);
                    if (prevAdjList.get(child)) {
                      prevAdjList.get(child).forEach(function(sn) {
                        return configuration.add(sn);
                      });
                    } else {
                      child.initialStateNodes.forEach(function(sn) {
                        return configuration.add(sn);
                      });
                    }
                  }
                }
              } catch (e_3_1) {
                e_3 = {
                  error: e_3_1
                };
              } finally {
                try {
                  if (_f && !_f.done && (_c = _e.return))
                    _c.call(_e);
                } finally {
                  if (e_3)
                    throw e_3.error;
                }
              }
            }
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return))
            _b.call(configuration_2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      try {
        for (var configuration_3 = _tslib.__values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
          var s = configuration_3_1.value;
          var m = s.parent;
          while (m && !configuration.has(m)) {
            configuration.add(m);
            m = m.parent;
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return))
            _d.call(configuration_3);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return configuration;
    }
    function getValueFromAdj(baseNode, adjList) {
      var childStateNodes = adjList.get(baseNode);
      if (!childStateNodes) {
        return {};
      }
      if (baseNode.type === "compound") {
        var childStateNode = childStateNodes[0];
        if (childStateNode) {
          if (isLeafNode(childStateNode)) {
            return childStateNode.key;
          }
        } else {
          return {};
        }
      }
      var stateValue = {};
      childStateNodes.forEach(function(csn) {
        stateValue[csn.key] = getValueFromAdj(csn, adjList);
      });
      return stateValue;
    }
    function getAdjList(configuration) {
      var e_5, _a;
      var adjList = /* @__PURE__ */ new Map();
      try {
        for (var configuration_4 = _tslib.__values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
          var s = configuration_4_1.value;
          if (!adjList.has(s)) {
            adjList.set(s, []);
          }
          if (s.parent) {
            if (!adjList.has(s.parent)) {
              adjList.set(s.parent, []);
            }
            adjList.get(s.parent).push(s);
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return))
            _a.call(configuration_4);
        } finally {
          if (e_5)
            throw e_5.error;
        }
      }
      return adjList;
    }
    function getValue(rootNode, configuration) {
      var config = getConfiguration([rootNode], configuration);
      return getValueFromAdj(rootNode, getAdjList(config));
    }
    function has(iterable, item) {
      if (Array.isArray(iterable)) {
        return iterable.some(function(member) {
          return member === item;
        });
      }
      if (iterable instanceof Set) {
        return iterable.has(item);
      }
      return false;
    }
    function nextEvents(configuration) {
      return _tslib.__spreadArray([], _tslib.__read(new Set(utils.flatten(_tslib.__spreadArray([], _tslib.__read(configuration.map(function(sn) {
        return sn.ownEvents;
      })), false)))), false);
    }
    function isInFinalState(configuration, stateNode) {
      if (stateNode.type === "compound") {
        return getChildren(stateNode).some(function(s) {
          return s.type === "final" && has(configuration, s);
        });
      }
      if (stateNode.type === "parallel") {
        return getChildren(stateNode).every(function(sn) {
          return isInFinalState(configuration, sn);
        });
      }
      return false;
    }
    function getMeta(configuration) {
      if (configuration === void 0) {
        configuration = [];
      }
      return configuration.reduce(function(acc, stateNode) {
        if (stateNode.meta !== void 0) {
          acc[stateNode.id] = stateNode.meta;
        }
        return acc;
      }, {});
    }
    function getTagsFromConfiguration(configuration) {
      return new Set(utils.flatten(configuration.map(function(sn) {
        return sn.tags;
      })));
    }
    exports.getAdjList = getAdjList;
    exports.getAllChildren = getAllChildren;
    exports.getAllStateNodes = getAllStateNodes;
    exports.getChildren = getChildren;
    exports.getConfiguration = getConfiguration;
    exports.getMeta = getMeta;
    exports.getTagsFromConfiguration = getTagsFromConfiguration;
    exports.getValue = getValue;
    exports.has = has;
    exports.isInFinalState = isInFinalState;
    exports.isLeafNode = isLeafNode;
    exports.nextEvents = nextEvents;
  }
});

// node_modules/xstate/lib/State.js
var require_State = __commonJS({
  "node_modules/xstate/lib/State.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var constants = require_constants();
    var utils = require_utils();
    var stateUtils = require_stateUtils();
    var actions = require_actions();
    var environment = require_environment();
    function stateValuesEqual(a, b) {
      if (a === b) {
        return true;
      }
      if (a === void 0 || b === void 0) {
        return false;
      }
      if (utils.isString(a) || utils.isString(b)) {
        return a === b;
      }
      var aKeys = Object.keys(a);
      var bKeys = Object.keys(b);
      return aKeys.length === bKeys.length && aKeys.every(function(key) {
        return stateValuesEqual(a[key], b[key]);
      });
    }
    function isStateConfig(state) {
      if (typeof state !== "object" || state === null) {
        return false;
      }
      return "value" in state && "_event" in state;
    }
    var isState = isStateConfig;
    function bindActionToState(action, state) {
      var exec = action.exec;
      var boundAction = _tslib.__assign(_tslib.__assign({}, action), {
        exec: exec !== void 0 ? function() {
          return exec(state.context, state.event, {
            action,
            state,
            _event: state._event
          });
        } : void 0
      });
      return boundAction;
    }
    var State = (
      /** @class */
      function() {
        function State2(config) {
          var _this = this;
          var _a;
          this.actions = [];
          this.activities = constants.EMPTY_ACTIVITY_MAP;
          this.meta = {};
          this.events = [];
          this.value = config.value;
          this.context = config.context;
          this._event = config._event;
          this._sessionid = config._sessionid;
          this.event = this._event.data;
          this.historyValue = config.historyValue;
          this.history = config.history;
          this.actions = config.actions || [];
          this.activities = config.activities || constants.EMPTY_ACTIVITY_MAP;
          this.meta = stateUtils.getMeta(config.configuration);
          this.events = config.events || [];
          this.matches = this.matches.bind(this);
          this.toStrings = this.toStrings.bind(this);
          this.configuration = config.configuration;
          this.transitions = config.transitions;
          this.children = config.children;
          this.done = !!config.done;
          this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
          this.machine = config.machine;
          Object.defineProperty(this, "nextEvents", {
            get: function() {
              return stateUtils.nextEvents(_this.configuration);
            }
          });
        }
        State2.from = function(stateValue, context) {
          if (stateValue instanceof State2) {
            if (stateValue.context !== context) {
              return new State2({
                value: stateValue.value,
                context,
                _event: stateValue._event,
                _sessionid: null,
                historyValue: stateValue.historyValue,
                history: stateValue.history,
                actions: [],
                activities: stateValue.activities,
                meta: {},
                events: [],
                configuration: [],
                transitions: [],
                children: {}
              });
            }
            return stateValue;
          }
          var _event = actions.initEvent;
          return new State2({
            value: stateValue,
            context,
            _event,
            _sessionid: null,
            historyValue: void 0,
            history: void 0,
            actions: [],
            activities: void 0,
            meta: void 0,
            events: [],
            configuration: [],
            transitions: [],
            children: {}
          });
        };
        State2.create = function(config) {
          return new State2(config);
        };
        State2.inert = function(stateValue, context) {
          if (stateValue instanceof State2) {
            if (!stateValue.actions.length) {
              return stateValue;
            }
            var _event = actions.initEvent;
            return new State2({
              value: stateValue.value,
              context,
              _event,
              _sessionid: null,
              historyValue: stateValue.historyValue,
              history: stateValue.history,
              activities: stateValue.activities,
              configuration: stateValue.configuration,
              transitions: [],
              children: {}
            });
          }
          return State2.from(stateValue, context);
        };
        State2.prototype.toStrings = function(stateValue, delimiter) {
          var _this = this;
          if (stateValue === void 0) {
            stateValue = this.value;
          }
          if (delimiter === void 0) {
            delimiter = ".";
          }
          if (utils.isString(stateValue)) {
            return [stateValue];
          }
          var valueKeys = Object.keys(stateValue);
          return valueKeys.concat.apply(valueKeys, _tslib.__spreadArray([], _tslib.__read(valueKeys.map(function(key) {
            return _this.toStrings(stateValue[key], delimiter).map(function(s) {
              return key + delimiter + s;
            });
          })), false));
        };
        State2.prototype.toJSON = function() {
          var _a = this;
          _a.configuration;
          _a.transitions;
          var tags = _a.tags;
          _a.machine;
          var jsonValues = _tslib.__rest(_a, ["configuration", "transitions", "tags", "machine"]);
          return _tslib.__assign(_tslib.__assign({}, jsonValues), {
            tags: Array.from(tags)
          });
        };
        State2.prototype.matches = function(parentStateValue) {
          return utils.matchesState(parentStateValue, this.value);
        };
        State2.prototype.hasTag = function(tag) {
          return this.tags.has(tag);
        };
        State2.prototype.can = function(event) {
          var _a;
          if (environment.IS_PRODUCTION) {
            utils.warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
          }
          var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
          return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
          transitionData.transitions.some(function(t) {
            return t.target !== void 0 || t.actions.length;
          });
        };
        return State2;
      }()
    );
    exports.State = State;
    exports.bindActionToState = bindActionToState;
    exports.isState = isState;
    exports.isStateConfig = isStateConfig;
    exports.stateValuesEqual = stateValuesEqual;
  }
});

// node_modules/xstate/lib/serviceScope.js
var require_serviceScope = __commonJS({
  "node_modules/xstate/lib/serviceScope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serviceStack = [];
    var provide = function(service, fn) {
      serviceStack.push(service);
      var result = fn(service);
      serviceStack.pop();
      return result;
    };
    var consume = function(fn) {
      return fn(serviceStack[serviceStack.length - 1]);
    };
    exports.consume = consume;
    exports.provide = provide;
  }
});

// node_modules/xstate/lib/Actor.js
var require_Actor = __commonJS({
  "node_modules/xstate/lib/Actor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var utils = require_utils();
    var serviceScope = require_serviceScope();
    function createNullActor(id) {
      var _a;
      return _a = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function() {
          return {
            unsubscribe: function() {
              return void 0;
            }
          };
        },
        getSnapshot: function() {
          return void 0;
        },
        toJSON: function() {
          return {
            id
          };
        }
      }, _a[utils.symbolObservable] = function() {
        return this;
      }, _a;
    }
    function createInvocableActor(invokeDefinition, machine, context, _event) {
      var _a;
      var invokeSrc = utils.toInvokeSource(invokeDefinition.src);
      var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
      var resolvedData = invokeDefinition.data ? utils.mapContext(invokeDefinition.data, context, _event) : void 0;
      var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);
      tempActor.meta = invokeDefinition;
      return tempActor;
    }
    function createDeferredActor(entity, id, data) {
      var tempActor = createNullActor(id);
      tempActor.deferred = true;
      if (utils.isMachine(entity)) {
        var initialState_1 = tempActor.state = serviceScope.provide(void 0, function() {
          return (data ? entity.withContext(data) : entity).initialState;
        });
        tempActor.getSnapshot = function() {
          return initialState_1;
        };
      }
      return tempActor;
    }
    function isActor(item) {
      try {
        return typeof item.send === "function";
      } catch (e) {
        return false;
      }
    }
    function isSpawnedActor(item) {
      return isActor(item) && "id" in item;
    }
    function toActorRef(actorRefLike) {
      var _a;
      return _tslib.__assign((_a = {
        subscribe: function() {
          return {
            unsubscribe: function() {
              return void 0;
            }
          };
        },
        id: "anonymous",
        getSnapshot: function() {
          return void 0;
        }
      }, _a[utils.symbolObservable] = function() {
        return this;
      }, _a), actorRefLike);
    }
    exports.createDeferredActor = createDeferredActor;
    exports.createInvocableActor = createInvocableActor;
    exports.createNullActor = createNullActor;
    exports.isActor = isActor;
    exports.isSpawnedActor = isSpawnedActor;
    exports.toActorRef = toActorRef;
  }
});

// node_modules/xstate/lib/invokeUtils.js
var require_invokeUtils = __commonJS({
  "node_modules/xstate/lib/invokeUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    require_types();
    var actionTypes = require_actionTypes();
    require_utils();
    require_environment();
    function toInvokeSource(src) {
      if (typeof src === "string") {
        var simpleSrc = {
          type: src
        };
        simpleSrc.toString = function() {
          return src;
        };
        return simpleSrc;
      }
      return src;
    }
    function toInvokeDefinition(invokeConfig) {
      return _tslib.__assign(_tslib.__assign({
        type: actionTypes.invoke
      }, invokeConfig), {
        toJSON: function() {
          invokeConfig.onDone;
          invokeConfig.onError;
          var invokeDef = _tslib.__rest(invokeConfig, ["onDone", "onError"]);
          return _tslib.__assign(_tslib.__assign({}, invokeDef), {
            type: actionTypes.invoke,
            src: toInvokeSource(invokeConfig.src)
          });
        }
      });
    }
    exports.toInvokeDefinition = toInvokeDefinition;
    exports.toInvokeSource = toInvokeSource;
  }
});

// node_modules/xstate/lib/StateNode.js
var require_StateNode = __commonJS({
  "node_modules/xstate/lib/StateNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var utils = require_utils();
    var State = require_State();
    var actionTypes = require_actionTypes();
    var actions = require_actions();
    var environment = require_environment();
    var constants = require_constants();
    var stateUtils = require_stateUtils();
    var Actor = require_Actor();
    var invokeUtils = require_invokeUtils();
    var NULL_EVENT = "";
    var STATE_IDENTIFIER = "#";
    var WILDCARD = "*";
    var EMPTY_OBJECT = {};
    var isStateId = function(str) {
      return str[0] === STATE_IDENTIFIER;
    };
    var createDefaultOptions = function() {
      return {
        actions: {},
        guards: {},
        services: {},
        activities: {},
        delays: {}
      };
    };
    var validateArrayifiedTransitions = function(stateNode, event, transitions) {
      var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {
        return !("cond" in transition) && !("in" in transition) && (utils.isString(transition.target) || utils.isMachine(transition.target));
      });
      var eventText = event === NULL_EVENT ? "the transient event" : "event '".concat(event, "'");
      utils.warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
    };
    var StateNode = (
      /** @class */
      function() {
        function StateNode2(config, options, _context, _stateInfo) {
          if (_context === void 0) {
            _context = "context" in config ? config.context : void 0;
          }
          var _this = this;
          var _a;
          this.config = config;
          this._context = _context;
          this.order = -1;
          this.__xstatenode = true;
          this.__cache = {
            events: void 0,
            relativeValue: /* @__PURE__ */ new Map(),
            initialStateValue: void 0,
            initialState: void 0,
            on: void 0,
            transitions: void 0,
            candidates: {},
            delayedTransitions: void 0
          };
          this.idMap = {};
          this.tags = [];
          this.options = Object.assign(createDefaultOptions(), options);
          this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
          this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || "(machine)";
          this.machine = this.parent ? this.parent.machine : this;
          this.path = this.parent ? this.parent.path.concat(this.key) : [];
          this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : constants.STATE_DELIMITER);
          this.id = this.config.id || _tslib.__spreadArray([this.machine.key], _tslib.__read(this.path), false).join(this.delimiter);
          this.version = this.parent ? this.parent.version : this.config.version;
          this.type = this.config.type || (this.config.parallel ? "parallel" : this.config.states && Object.keys(this.config.states).length ? "compound" : this.config.history ? "history" : "atomic");
          this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
          this.description = this.config.description;
          if (!environment.IS_PRODUCTION) {
            utils.warn(!("parallel" in this.config), 'The "parallel" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
          }
          this.initial = this.config.initial;
          this.states = this.config.states ? utils.mapValues(this.config.states, function(stateConfig, key) {
            var _a2;
            var stateNode = new StateNode2(stateConfig, {}, void 0, {
              parent: _this,
              key
            });
            Object.assign(_this.idMap, _tslib.__assign((_a2 = {}, _a2[stateNode.id] = stateNode, _a2), stateNode.idMap));
            return stateNode;
          }) : EMPTY_OBJECT;
          var order = 0;
          function dfs(stateNode) {
            var e_1, _a2;
            stateNode.order = order++;
            try {
              for (var _b = _tslib.__values(stateUtils.getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                dfs(child);
              }
            } catch (e_1_1) {
              e_1 = {
                error: e_1_1
              };
            } finally {
              try {
                if (_c && !_c.done && (_a2 = _b.return))
                  _a2.call(_b);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }
          dfs(this);
          this.history = this.config.history === true ? "shallow" : this.config.history || false;
          this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a2) {
            var event = _a2.event;
            return event === NULL_EVENT;
          }) : NULL_EVENT in this.config.on);
          this.strict = !!this.config.strict;
          this.onEntry = utils.toArray(this.config.entry || this.config.onEntry).map(function(action) {
            return actions.toActionObject(action);
          });
          this.onExit = utils.toArray(this.config.exit || this.config.onExit).map(function(action) {
            return actions.toActionObject(action);
          });
          this.meta = this.config.meta;
          this.doneData = this.type === "final" ? this.config.data : void 0;
          this.invoke = utils.toArray(this.config.invoke).map(function(invokeConfig, i) {
            var _a2, _b;
            if (utils.isMachine(invokeConfig)) {
              var invokeId = utils.createInvokeId(_this.id, i);
              _this.machine.options.services = _tslib.__assign((_a2 = {}, _a2[invokeId] = invokeConfig, _a2), _this.machine.options.services);
              return invokeUtils.toInvokeDefinition({
                src: invokeId,
                id: invokeId
              });
            } else if (utils.isString(invokeConfig.src)) {
              var invokeId = invokeConfig.id || utils.createInvokeId(_this.id, i);
              return invokeUtils.toInvokeDefinition(_tslib.__assign(_tslib.__assign({}, invokeConfig), {
                id: invokeId,
                src: invokeConfig.src
              }));
            } else if (utils.isMachine(invokeConfig.src) || utils.isFunction(invokeConfig.src)) {
              var invokeId = invokeConfig.id || utils.createInvokeId(_this.id, i);
              _this.machine.options.services = _tslib.__assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
              return invokeUtils.toInvokeDefinition(_tslib.__assign(_tslib.__assign({
                id: invokeId
              }, invokeConfig), {
                src: invokeId
              }));
            } else {
              var invokeSource = invokeConfig.src;
              return invokeUtils.toInvokeDefinition(_tslib.__assign(_tslib.__assign({
                id: utils.createInvokeId(_this.id, i)
              }, invokeConfig), {
                src: invokeSource
              }));
            }
          });
          this.activities = utils.toArray(this.config.activities).concat(this.invoke).map(function(activity) {
            return actions.toActivityDefinition(activity);
          });
          this.transition = this.transition.bind(this);
          this.tags = utils.toArray(this.config.tags);
        }
        StateNode2.prototype._init = function() {
          if (this.__cache.transitions) {
            return;
          }
          stateUtils.getAllStateNodes(this).forEach(function(stateNode) {
            return stateNode.on;
          });
        };
        StateNode2.prototype.withConfig = function(options, context) {
          var _a = this.options, actions2 = _a.actions, activities = _a.activities, guards = _a.guards, services = _a.services, delays = _a.delays;
          return new StateNode2(this.config, {
            actions: _tslib.__assign(_tslib.__assign({}, actions2), options.actions),
            activities: _tslib.__assign(_tslib.__assign({}, activities), options.activities),
            guards: _tslib.__assign(_tslib.__assign({}, guards), options.guards),
            services: _tslib.__assign(_tslib.__assign({}, services), options.services),
            delays: _tslib.__assign(_tslib.__assign({}, delays), options.delays)
          }, context !== null && context !== void 0 ? context : this.context);
        };
        StateNode2.prototype.withContext = function(context) {
          return new StateNode2(this.config, this.options, context);
        };
        Object.defineProperty(StateNode2.prototype, "context", {
          get: function() {
            return utils.isFunction(this._context) ? this._context() : this._context;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "definition", {
          /**
           * The well-structured state node definition.
           */
          get: function() {
            return {
              id: this.id,
              key: this.key,
              version: this.version,
              context: this.context,
              type: this.type,
              initial: this.initial,
              history: this.history,
              states: utils.mapValues(this.states, function(state) {
                return state.definition;
              }),
              on: this.on,
              transitions: this.transitions,
              entry: this.onEntry,
              exit: this.onExit,
              activities: this.activities || [],
              meta: this.meta,
              order: this.order || -1,
              data: this.doneData,
              invoke: this.invoke,
              description: this.description,
              tags: this.tags
            };
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.toJSON = function() {
          return this.definition;
        };
        Object.defineProperty(StateNode2.prototype, "on", {
          /**
           * The mapping of events to transitions.
           */
          get: function() {
            if (this.__cache.on) {
              return this.__cache.on;
            }
            var transitions = this.transitions;
            return this.__cache.on = transitions.reduce(function(map, transition) {
              map[transition.eventType] = map[transition.eventType] || [];
              map[transition.eventType].push(transition);
              return map;
            }, {});
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "after", {
          get: function() {
            return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "transitions", {
          /**
           * All the transitions that can be taken from this state node.
           */
          get: function() {
            return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.getCandidates = function(eventName) {
          if (this.__cache.candidates[eventName]) {
            return this.__cache.candidates[eventName];
          }
          var transient = eventName === NULL_EVENT;
          var candidates = this.transitions.filter(function(transition) {
            var sameEventType = transition.eventType === eventName;
            return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
          });
          this.__cache.candidates[eventName] = candidates;
          return candidates;
        };
        StateNode2.prototype.getDelayedTransitions = function() {
          var _this = this;
          var afterConfig = this.config.after;
          if (!afterConfig) {
            return [];
          }
          var mutateEntryExit = function(delay, i) {
            var delayRef = utils.isFunction(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
            var eventType = actions.after(delayRef, _this.id);
            _this.onEntry.push(actions.send(eventType, {
              delay
            }));
            _this.onExit.push(actions.cancel(eventType));
            return eventType;
          };
          var delayedTransitions = utils.isArray(afterConfig) ? afterConfig.map(function(transition, i) {
            var eventType = mutateEntryExit(transition.delay, i);
            return _tslib.__assign(_tslib.__assign({}, transition), {
              event: eventType
            });
          }) : utils.flatten(Object.keys(afterConfig).map(function(delay, i) {
            var configTransition = afterConfig[delay];
            var resolvedTransition = utils.isString(configTransition) ? {
              target: configTransition
            } : configTransition;
            var resolvedDelay = !isNaN(+delay) ? +delay : delay;
            var eventType = mutateEntryExit(resolvedDelay, i);
            return utils.toArray(resolvedTransition).map(function(transition) {
              return _tslib.__assign(_tslib.__assign({}, transition), {
                event: eventType,
                delay: resolvedDelay
              });
            });
          }));
          return delayedTransitions.map(function(delayedTransition) {
            var delay = delayedTransition.delay;
            return _tslib.__assign(_tslib.__assign({}, _this.formatTransition(delayedTransition)), {
              delay
            });
          });
        };
        StateNode2.prototype.getStateNodes = function(state) {
          var _a;
          var _this = this;
          if (!state) {
            return [];
          }
          var stateValue = state instanceof State.State ? state.value : utils.toStateValue(state, this.delimiter);
          if (utils.isString(stateValue)) {
            var initialStateValue = this.getStateNode(stateValue).initial;
            return initialStateValue !== void 0 ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
          }
          var subStateKeys = Object.keys(stateValue);
          var subStateNodes = [this];
          subStateNodes.push.apply(subStateNodes, _tslib.__spreadArray([], _tslib.__read(utils.flatten(subStateKeys.map(function(subStateKey) {
            return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
          }))), false));
          return subStateNodes;
        };
        StateNode2.prototype.handles = function(event) {
          var eventType = utils.getEventType(event);
          return this.events.includes(eventType);
        };
        StateNode2.prototype.resolveState = function(state) {
          var stateFromConfig = state instanceof State.State ? state : State.State.create(state);
          var configuration = Array.from(stateUtils.getConfiguration([], this.getStateNodes(stateFromConfig.value)));
          return new State.State(_tslib.__assign(_tslib.__assign({}, stateFromConfig), {
            value: this.resolve(stateFromConfig.value),
            configuration,
            done: stateUtils.isInFinalState(configuration, this),
            tags: stateUtils.getTagsFromConfiguration(configuration),
            machine: this.machine
          }));
        };
        StateNode2.prototype.transitionLeafNode = function(stateValue, state, _event) {
          var stateNode = this.getStateNode(stateValue);
          var next = stateNode.next(state, _event);
          if (!next || !next.transitions.length) {
            return this.next(state, _event);
          }
          return next;
        };
        StateNode2.prototype.transitionCompoundNode = function(stateValue, state, _event) {
          var subStateKeys = Object.keys(stateValue);
          var stateNode = this.getStateNode(subStateKeys[0]);
          var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
          if (!next || !next.transitions.length) {
            return this.next(state, _event);
          }
          return next;
        };
        StateNode2.prototype.transitionParallelNode = function(stateValue, state, _event) {
          var e_2, _a;
          var transitionMap = {};
          try {
            for (var _b = _tslib.__values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var subStateKey = _c.value;
              var subStateValue = stateValue[subStateKey];
              if (!subStateValue) {
                continue;
              }
              var subStateNode = this.getStateNode(subStateKey);
              var next = subStateNode._transition(subStateValue, state, _event);
              if (next) {
                transitionMap[subStateKey] = next;
              }
            }
          } catch (e_2_1) {
            e_2 = {
              error: e_2_1
            };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          var stateTransitions = Object.keys(transitionMap).map(function(key) {
            return transitionMap[key];
          });
          var enabledTransitions = utils.flatten(stateTransitions.map(function(st) {
            return st.transitions;
          }));
          var willTransition = stateTransitions.some(function(st) {
            return st.transitions.length > 0;
          });
          if (!willTransition) {
            return this.next(state, _event);
          }
          var configuration = utils.flatten(Object.keys(transitionMap).map(function(key) {
            return transitionMap[key].configuration;
          }));
          return {
            transitions: enabledTransitions,
            exitSet: utils.flatten(stateTransitions.map(function(t) {
              return t.exitSet;
            })),
            configuration,
            source: state,
            actions: utils.flatten(Object.keys(transitionMap).map(function(key) {
              return transitionMap[key].actions;
            }))
          };
        };
        StateNode2.prototype._transition = function(stateValue, state, _event) {
          if (utils.isString(stateValue)) {
            return this.transitionLeafNode(stateValue, state, _event);
          }
          if (Object.keys(stateValue).length === 1) {
            return this.transitionCompoundNode(stateValue, state, _event);
          }
          return this.transitionParallelNode(stateValue, state, _event);
        };
        StateNode2.prototype.getTransitionData = function(state, event) {
          return this._transition(state.value, state, utils.toSCXMLEvent(event));
        };
        StateNode2.prototype.next = function(state, _event) {
          var e_3, _a;
          var _this = this;
          var eventName = _event.name;
          var actions2 = [];
          var nextStateNodes = [];
          var selectedTransition;
          try {
            for (var _b = _tslib.__values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var candidate = _c.value;
              var cond = candidate.cond, stateIn = candidate.in;
              var resolvedContext = state.context;
              var isInState = stateIn ? utils.isString(stateIn) && isStateId(stateIn) ? (
                // Check if in state by ID
                state.matches(utils.toStateValue(this.getStateNodeById(stateIn).path, this.delimiter))
              ) : (
                // Check if in state by relative grandparent
                utils.matchesState(utils.toStateValue(stateIn, this.delimiter), utils.path(this.path.slice(0, -2))(state.value))
              ) : true;
              var guardPassed = false;
              try {
                guardPassed = !cond || utils.evaluateGuard(this.machine, cond, resolvedContext, _event, state);
              } catch (err) {
                throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
              }
              if (guardPassed && isInState) {
                if (candidate.target !== void 0) {
                  nextStateNodes = candidate.target;
                }
                actions2.push.apply(actions2, _tslib.__spreadArray([], _tslib.__read(candidate.actions), false));
                selectedTransition = candidate;
                break;
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
          if (!selectedTransition) {
            return void 0;
          }
          if (!nextStateNodes.length) {
            return {
              transitions: [selectedTransition],
              exitSet: [],
              configuration: state.value ? [this] : [],
              source: state,
              actions: actions2
            };
          }
          var allNextStateNodes = utils.flatten(nextStateNodes.map(function(stateNode) {
            return _this.getRelativeStateNodes(stateNode, state.historyValue);
          }));
          var isInternal = !!selectedTransition.internal;
          return {
            transitions: [selectedTransition],
            exitSet: isInternal ? [] : utils.flatten(nextStateNodes.map(function(targetNode) {
              return _this.getPotentiallyReenteringNodes(targetNode);
            })),
            configuration: allNextStateNodes,
            source: state,
            actions: actions2
          };
        };
        StateNode2.prototype.getPotentiallyReenteringNodes = function(targetNode) {
          if (this.order < targetNode.order) {
            return [this];
          }
          var nodes = [];
          var marker = this;
          var possibleAncestor = targetNode;
          while (marker && marker !== possibleAncestor) {
            nodes.push(marker);
            marker = marker.parent;
          }
          if (marker !== possibleAncestor) {
            return [];
          }
          nodes.push(possibleAncestor);
          return nodes;
        };
        StateNode2.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
          var e_4, _a, e_5, _b;
          var _this = this;
          var prevConfig = prevState ? stateUtils.getConfiguration([], this.getStateNodes(prevState.value)) : [];
          var entrySet = /* @__PURE__ */ new Set();
          try {
            for (var _c = _tslib.__values(Array.from(resolvedConfig).sort(function(a, b) {
              return a.order - b.order;
            })), _d = _c.next(); !_d.done; _d = _c.next()) {
              var sn = _d.value;
              if (!stateUtils.has(prevConfig, sn) || stateUtils.has(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
                entrySet.add(sn);
              }
            }
          } catch (e_4_1) {
            e_4 = {
              error: e_4_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return))
                _a.call(_c);
            } finally {
              if (e_4)
                throw e_4.error;
            }
          }
          try {
            for (var prevConfig_1 = _tslib.__values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
              var sn = prevConfig_1_1.value;
              if (!stateUtils.has(resolvedConfig, sn) || stateUtils.has(transition.exitSet, sn.parent)) {
                transition.exitSet.push(sn);
              }
            }
          } catch (e_5_1) {
            e_5 = {
              error: e_5_1
            };
          } finally {
            try {
              if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return))
                _b.call(prevConfig_1);
            } finally {
              if (e_5)
                throw e_5.error;
            }
          }
          transition.exitSet.sort(function(a, b) {
            return b.order - a.order;
          });
          var entryStates = Array.from(entrySet).sort(function(a, b) {
            return a.order - b.order;
          });
          var exitStates = new Set(transition.exitSet);
          var doneEvents = utils.flatten(entryStates.map(function(sn2) {
            var events = [];
            if (sn2.type !== "final") {
              return events;
            }
            var parent = sn2.parent;
            if (!parent.parent) {
              return events;
            }
            events.push(
              actions.done(sn2.id, sn2.doneData),
              // TODO: deprecate - final states should not emit done events for their own state.
              actions.done(parent.id, sn2.doneData ? utils.mapContext(sn2.doneData, currentContext, _event) : void 0)
            );
            var grandparent = parent.parent;
            if (grandparent.type === "parallel") {
              if (stateUtils.getChildren(grandparent).every(function(parentNode) {
                return stateUtils.isInFinalState(transition.configuration, parentNode);
              })) {
                events.push(actions.done(grandparent.id));
              }
            }
            return events;
          }));
          var entryActions = entryStates.map(function(stateNode) {
            var entryActions2 = stateNode.onEntry;
            var invokeActions = stateNode.activities.map(function(activity) {
              return actions.start(activity);
            });
            return {
              type: "entry",
              actions: actions.toActionObjects(predictableExec ? _tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(entryActions2), false), _tslib.__read(invokeActions), false) : _tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(invokeActions), false), _tslib.__read(entryActions2), false), _this.machine.options.actions)
            };
          }).concat({
            type: "state_done",
            actions: doneEvents.map(function(event) {
              return actions.raise(event);
            })
          });
          var exitActions = Array.from(exitStates).map(function(stateNode) {
            return {
              type: "exit",
              actions: actions.toActionObjects(_tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(stateNode.onExit), false), _tslib.__read(stateNode.activities.map(function(activity) {
                return actions.stop(activity);
              })), false), _this.machine.options.actions)
            };
          });
          var actions$1 = exitActions.concat({
            type: "transition",
            actions: actions.toActionObjects(transition.actions, this.machine.options.actions)
          }).concat(entryActions);
          if (isDone) {
            var stopActions = actions.toActionObjects(utils.flatten(_tslib.__spreadArray([], _tslib.__read(resolvedConfig), false).sort(function(a, b) {
              return b.order - a.order;
            }).map(function(stateNode) {
              return stateNode.onExit;
            })), this.machine.options.actions).filter(function(action) {
              return !utils.isRaisableAction(action);
            });
            return actions$1.concat({
              type: "stop",
              actions: stopActions
            });
          }
          return actions$1;
        };
        StateNode2.prototype.transition = function(state, event, context, exec) {
          if (state === void 0) {
            state = this.initialState;
          }
          var _event = utils.toSCXMLEvent(event);
          var currentState;
          if (state instanceof State.State) {
            currentState = context === void 0 ? state : this.resolveState(State.State.from(state, context));
          } else {
            var resolvedStateValue = utils.isString(state) ? this.resolve(utils.pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
            var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
            currentState = this.resolveState(State.State.from(resolvedStateValue, resolvedContext));
          }
          if (!environment.IS_PRODUCTION && _event.name === WILDCARD) {
            throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
          }
          if (this.strict) {
            if (!this.events.includes(_event.name) && !utils.isBuiltInEvent(_event.name)) {
              throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
            }
          }
          var stateTransition = this._transition(currentState.value, currentState, _event) || {
            transitions: [],
            configuration: [],
            exitSet: [],
            source: currentState,
            actions: []
          };
          var prevConfig = stateUtils.getConfiguration([], this.getStateNodes(currentState.value));
          var resolvedConfig = stateTransition.configuration.length ? stateUtils.getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
          stateTransition.configuration = _tslib.__spreadArray([], _tslib.__read(resolvedConfig), false);
          return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
        };
        StateNode2.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {
          var _a;
          var currentActions = state.actions;
          state = this.transition(state, _event, void 0, predictableExec);
          state._event = originalEvent;
          state.event = originalEvent.data;
          (_a = state.actions).unshift.apply(_a, _tslib.__spreadArray([], _tslib.__read(currentActions), false));
          return state;
        };
        StateNode2.prototype.resolveTransition = function(stateTransition, currentState, context, predictableExec, _event) {
          var e_6, _a, e_7, _b;
          var _this = this;
          if (_event === void 0) {
            _event = actions.initEvent;
          }
          var configuration = stateTransition.configuration;
          var willTransition = !currentState || stateTransition.transitions.length > 0;
          var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
          var isDone = stateUtils.isInFinalState(resolvedConfiguration, this);
          var resolvedStateValue = willTransition ? stateUtils.getValue(this.machine, configuration) : void 0;
          var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : void 0 : void 0;
          var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);
          var activities = currentState ? _tslib.__assign({}, currentState.activities) : {};
          try {
            for (var actionBlocks_1 = _tslib.__values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
              var block = actionBlocks_1_1.value;
              try {
                for (var _c = (e_7 = void 0, _tslib.__values(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var action = _d.value;
                  if (action.type === actionTypes.start) {
                    activities[action.activity.id || action.activity.type] = action;
                  } else if (action.type === actionTypes.stop) {
                    activities[action.activity.id || action.activity.type] = false;
                  }
                }
              } catch (e_7_1) {
                e_7 = {
                  error: e_7_1
                };
              } finally {
                try {
                  if (_d && !_d.done && (_b = _c.return))
                    _b.call(_c);
                } finally {
                  if (e_7)
                    throw e_7.error;
                }
              }
            }
          } catch (e_6_1) {
            e_6 = {
              error: e_6_1
            };
          } finally {
            try {
              if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return))
                _a.call(actionBlocks_1);
            } finally {
              if (e_6)
                throw e_6.error;
            }
          }
          var _e = _tslib.__read(actions.resolveActions(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];
          var _f = _tslib.__read(utils.partition(resolvedActions, utils.isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];
          var invokeActions = resolvedActions.filter(function(action2) {
            var _a2;
            return action2.type === actionTypes.start && ((_a2 = action2.activity) === null || _a2 === void 0 ? void 0 : _a2.type) === actionTypes.invoke;
          });
          var children = invokeActions.reduce(function(acc, action2) {
            acc[action2.activity.id] = Actor.createInvocableActor(action2.activity, _this.machine, updatedContext, _event);
            return acc;
          }, currentState ? _tslib.__assign({}, currentState.children) : {});
          var nextState = new State.State({
            value: resolvedStateValue || currentState.value,
            context: updatedContext,
            _event,
            // Persist _sessionid between states
            _sessionid: currentState ? currentState._sessionid : null,
            historyValue: resolvedStateValue ? historyValue ? utils.updateHistoryValue(historyValue, resolvedStateValue) : void 0 : currentState ? currentState.historyValue : void 0,
            history: !resolvedStateValue || stateTransition.source ? currentState : void 0,
            actions: resolvedStateValue ? nonRaisedActions : [],
            activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
            events: [],
            configuration: resolvedConfiguration,
            transitions: stateTransition.transitions,
            children,
            done: isDone,
            tags: stateUtils.getTagsFromConfiguration(resolvedConfiguration),
            machine: this
          });
          var didUpdateContext = context !== updatedContext;
          nextState.changed = _event.name === actionTypes.update || didUpdateContext;
          var history = nextState.history;
          if (history) {
            delete history.history;
          }
          var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {
            return stateNode._transient;
          }));
          if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
            return nextState;
          }
          var maybeNextState = nextState;
          if (!isDone) {
            if (hasAlwaysTransitions) {
              maybeNextState = this.resolveRaisedTransition(maybeNextState, {
                type: actionTypes.nullEvent
              }, _event, predictableExec);
            }
            while (raisedEvents.length) {
              var raisedEvent = raisedEvents.shift();
              maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
            }
          }
          var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !State.stateValuesEqual(maybeNextState.value, history.value) : void 0);
          maybeNextState.changed = changed;
          maybeNextState.history = history;
          return maybeNextState;
        };
        StateNode2.prototype.getStateNode = function(stateKey) {
          if (isStateId(stateKey)) {
            return this.machine.getStateNodeById(stateKey);
          }
          if (!this.states) {
            throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
          }
          var result = this.states[stateKey];
          if (!result) {
            throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
          }
          return result;
        };
        StateNode2.prototype.getStateNodeById = function(stateId) {
          var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;
          if (resolvedStateId === this.id) {
            return this;
          }
          var stateNode = this.machine.idMap[resolvedStateId];
          if (!stateNode) {
            throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
          }
          return stateNode;
        };
        StateNode2.prototype.getStateNodeByPath = function(statePath) {
          if (typeof statePath === "string" && isStateId(statePath)) {
            try {
              return this.getStateNodeById(statePath.slice(1));
            } catch (e) {
            }
          }
          var arrayStatePath = utils.toStatePath(statePath, this.delimiter).slice();
          var currentStateNode = this;
          while (arrayStatePath.length) {
            var key = arrayStatePath.shift();
            if (!key.length) {
              break;
            }
            currentStateNode = currentStateNode.getStateNode(key);
          }
          return currentStateNode;
        };
        StateNode2.prototype.resolve = function(stateValue) {
          var _a;
          var _this = this;
          if (!stateValue) {
            return this.initialStateValue || EMPTY_OBJECT;
          }
          switch (this.type) {
            case "parallel":
              return utils.mapValues(this.initialStateValue, function(subStateValue, subStateKey) {
                return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
              });
            case "compound":
              if (utils.isString(stateValue)) {
                var subStateNode = this.getStateNode(stateValue);
                if (subStateNode.type === "parallel" || subStateNode.type === "compound") {
                  return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
                }
                return stateValue;
              }
              if (!Object.keys(stateValue).length) {
                return this.initialStateValue || {};
              }
              return utils.mapValues(stateValue, function(subStateValue, subStateKey) {
                return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
              });
            default:
              return stateValue || EMPTY_OBJECT;
          }
        };
        StateNode2.prototype.getResolvedPath = function(stateIdentifier) {
          if (isStateId(stateIdentifier)) {
            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];
            if (!stateNode) {
              throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
            }
            return stateNode.path;
          }
          return utils.toStatePath(stateIdentifier, this.delimiter);
        };
        Object.defineProperty(StateNode2.prototype, "initialStateValue", {
          get: function() {
            var _a;
            if (this.__cache.initialStateValue) {
              return this.__cache.initialStateValue;
            }
            var initialStateValue;
            if (this.type === "parallel") {
              initialStateValue = utils.mapFilterValues(this.states, function(state) {
                return state.initialStateValue || EMPTY_OBJECT;
              }, function(stateNode) {
                return !(stateNode.type === "history");
              });
            } else if (this.initial !== void 0) {
              if (!this.states[this.initial]) {
                throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
              }
              initialStateValue = stateUtils.isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
            } else {
              initialStateValue = {};
            }
            this.__cache.initialStateValue = initialStateValue;
            return this.__cache.initialStateValue;
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.getInitialState = function(stateValue, context) {
          this._init();
          var configuration = this.getStateNodes(stateValue);
          return this.resolveTransition({
            configuration,
            exitSet: [],
            transitions: [],
            source: void 0,
            actions: []
          }, void 0, context !== null && context !== void 0 ? context : this.machine.context, void 0);
        };
        Object.defineProperty(StateNode2.prototype, "initialState", {
          /**
           * The initial State instance, which includes all actions to be executed from
           * entering the initial state.
           */
          get: function() {
            var initialStateValue = this.initialStateValue;
            if (!initialStateValue) {
              throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
            }
            return this.getInitialState(initialStateValue);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "target", {
          /**
           * The target state value of the history state node, if it exists. This represents the
           * default state value to transition to if no history value exists yet.
           */
          get: function() {
            var target;
            if (this.type === "history") {
              var historyConfig = this.config;
              if (utils.isString(historyConfig.target)) {
                target = isStateId(historyConfig.target) ? utils.pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
              } else {
                target = historyConfig.target;
              }
            }
            return target;
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {
          if (resolve === void 0) {
            resolve = true;
          }
          return resolve ? relativeStateId.type === "history" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
        };
        Object.defineProperty(StateNode2.prototype, "initialStateNodes", {
          get: function() {
            var _this = this;
            if (stateUtils.isLeafNode(this)) {
              return [this];
            }
            if (this.type === "compound" && !this.initial) {
              if (!environment.IS_PRODUCTION) {
                utils.warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
              }
              return [this];
            }
            var initialStateNodePaths = utils.toStatePaths(this.initialStateValue);
            return utils.flatten(initialStateNodePaths.map(function(initialPath) {
              return _this.getFromRelativePath(initialPath);
            }));
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.getFromRelativePath = function(relativePath) {
          if (!relativePath.length) {
            return [this];
          }
          var _a = _tslib.__read(relativePath), stateKey = _a[0], childStatePath = _a.slice(1);
          if (!this.states) {
            throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
          }
          var childStateNode = this.getStateNode(stateKey);
          if (childStateNode.type === "history") {
            return childStateNode.resolveHistory();
          }
          if (!this.states[stateKey]) {
            throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
          }
          return this.states[stateKey].getFromRelativePath(childStatePath);
        };
        StateNode2.prototype.historyValue = function(relativeStateValue) {
          if (!Object.keys(this.states).length) {
            return void 0;
          }
          return {
            current: relativeStateValue || this.initialStateValue,
            states: utils.mapFilterValues(this.states, function(stateNode, key) {
              if (!relativeStateValue) {
                return stateNode.historyValue();
              }
              var subStateValue = utils.isString(relativeStateValue) ? void 0 : relativeStateValue[key];
              return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
            }, function(stateNode) {
              return !stateNode.history;
            })
          };
        };
        StateNode2.prototype.resolveHistory = function(historyValue) {
          var _this = this;
          if (this.type !== "history") {
            return [this];
          }
          var parent = this.parent;
          if (!historyValue) {
            var historyTarget = this.target;
            return historyTarget ? utils.flatten(utils.toStatePaths(historyTarget).map(function(relativeChildPath) {
              return parent.getFromRelativePath(relativeChildPath);
            })) : parent.initialStateNodes;
          }
          var subHistoryValue = utils.nestedPath(parent.path, "states")(historyValue).current;
          if (utils.isString(subHistoryValue)) {
            return [parent.getStateNode(subHistoryValue)];
          }
          return utils.flatten(utils.toStatePaths(subHistoryValue).map(function(subStatePath) {
            return _this.history === "deep" ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
          }));
        };
        Object.defineProperty(StateNode2.prototype, "stateIds", {
          /**
           * All the state node IDs of this state node and its descendant state nodes.
           */
          get: function() {
            var _this = this;
            var childStateIds = utils.flatten(Object.keys(this.states).map(function(stateKey) {
              return _this.states[stateKey].stateIds;
            }));
            return [this.id].concat(childStateIds);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "events", {
          /**
           * All the event types accepted by this state node and its descendants.
           */
          get: function() {
            var e_8, _a, e_9, _b;
            if (this.__cache.events) {
              return this.__cache.events;
            }
            var states = this.states;
            var events = new Set(this.ownEvents);
            if (states) {
              try {
                for (var _c = _tslib.__values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var stateId = _d.value;
                  var state = states[stateId];
                  if (state.states) {
                    try {
                      for (var _e = (e_9 = void 0, _tslib.__values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var event_1 = _f.value;
                        events.add("".concat(event_1));
                      }
                    } catch (e_9_1) {
                      e_9 = {
                        error: e_9_1
                      };
                    } finally {
                      try {
                        if (_f && !_f.done && (_b = _e.return))
                          _b.call(_e);
                      } finally {
                        if (e_9)
                          throw e_9.error;
                      }
                    }
                  }
                }
              } catch (e_8_1) {
                e_8 = {
                  error: e_8_1
                };
              } finally {
                try {
                  if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
                } finally {
                  if (e_8)
                    throw e_8.error;
                }
              }
            }
            return this.__cache.events = Array.from(events);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StateNode2.prototype, "ownEvents", {
          /**
           * All the events that have transitions directly from this state node.
           *
           * Excludes any inert events.
           */
          get: function() {
            var events = new Set(this.transitions.filter(function(transition) {
              return !(!transition.target && !transition.actions.length && transition.internal);
            }).map(function(transition) {
              return transition.eventType;
            }));
            return Array.from(events);
          },
          enumerable: false,
          configurable: true
        });
        StateNode2.prototype.resolveTarget = function(_target) {
          var _this = this;
          if (_target === void 0) {
            return void 0;
          }
          return _target.map(function(target) {
            if (!utils.isString(target)) {
              return target;
            }
            var isInternalTarget = target[0] === _this.delimiter;
            if (isInternalTarget && !_this.parent) {
              return _this.getStateNodeByPath(target.slice(1));
            }
            var resolvedTarget = isInternalTarget ? _this.key + target : target;
            if (_this.parent) {
              try {
                var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
                return targetStateNode;
              } catch (err) {
                throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
              }
            } else {
              return _this.getStateNodeByPath(resolvedTarget);
            }
          });
        };
        StateNode2.prototype.formatTransition = function(transitionConfig) {
          var _this = this;
          var normalizedTarget = utils.normalizeTarget(transitionConfig.target);
          var internal = "internal" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {
            return utils.isString(_target) && _target[0] === _this.delimiter;
          }) : true;
          var guards = this.machine.options.guards;
          var target = this.resolveTarget(normalizedTarget);
          var transition = _tslib.__assign(_tslib.__assign({}, transitionConfig), {
            actions: actions.toActionObjects(utils.toArray(transitionConfig.actions)),
            cond: utils.toGuard(transitionConfig.cond, guards),
            target,
            source: this,
            internal,
            eventType: transitionConfig.event,
            toJSON: function() {
              return _tslib.__assign(_tslib.__assign({}, transition), {
                target: transition.target ? transition.target.map(function(t) {
                  return "#".concat(t.id);
                }) : void 0,
                source: "#".concat(_this.id)
              });
            }
          });
          return transition;
        };
        StateNode2.prototype.formatTransitions = function() {
          var e_10, _a;
          var _this = this;
          var onConfig;
          if (!this.config.on) {
            onConfig = [];
          } else if (Array.isArray(this.config.on)) {
            onConfig = this.config.on;
          } else {
            var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = _tslib.__rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
            onConfig = utils.flatten(Object.keys(strictTransitionConfigs_1).map(function(key) {
              if (!environment.IS_PRODUCTION && key === NULL_EVENT) {
                utils.warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + 'Please check the `on` configuration for "#'.concat(_this.id, '".'));
              }
              var transitionConfigArray = utils.toTransitionConfigArray(key, strictTransitionConfigs_1[key]);
              if (!environment.IS_PRODUCTION) {
                validateArrayifiedTransitions(_this, key, transitionConfigArray);
              }
              return transitionConfigArray;
            }).concat(utils.toTransitionConfigArray(WILDCARD, wildcardConfigs)));
          }
          var eventlessConfig = this.config.always ? utils.toTransitionConfigArray("", this.config.always) : [];
          var doneConfig = this.config.onDone ? utils.toTransitionConfigArray(String(actions.done(this.id)), this.config.onDone) : [];
          if (!environment.IS_PRODUCTION) {
            utils.warn(!(this.config.onDone && !this.parent), 'Root nodes cannot have an ".onDone" transition. Please check the config of "'.concat(this.id, '".'));
          }
          var invokeConfig = utils.flatten(this.invoke.map(function(invokeDef) {
            var settleTransitions = [];
            if (invokeDef.onDone) {
              settleTransitions.push.apply(settleTransitions, _tslib.__spreadArray([], _tslib.__read(utils.toTransitionConfigArray(String(actions.doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
            }
            if (invokeDef.onError) {
              settleTransitions.push.apply(settleTransitions, _tslib.__spreadArray([], _tslib.__read(utils.toTransitionConfigArray(String(actions.error(invokeDef.id)), invokeDef.onError)), false));
            }
            return settleTransitions;
          }));
          var delayedTransitions = this.after;
          var formattedTransitions = utils.flatten(_tslib.__spreadArray(_tslib.__spreadArray(_tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(doneConfig), false), _tslib.__read(invokeConfig), false), _tslib.__read(onConfig), false), _tslib.__read(eventlessConfig), false).map(function(transitionConfig) {
            return utils.toArray(transitionConfig).map(function(transition) {
              return _this.formatTransition(transition);
            });
          }));
          try {
            for (var delayedTransitions_1 = _tslib.__values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
              var delayedTransition = delayedTransitions_1_1.value;
              formattedTransitions.push(delayedTransition);
            }
          } catch (e_10_1) {
            e_10 = {
              error: e_10_1
            };
          } finally {
            try {
              if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return))
                _a.call(delayedTransitions_1);
            } finally {
              if (e_10)
                throw e_10.error;
            }
          }
          return formattedTransitions;
        };
        return StateNode2;
      }()
    );
    exports.StateNode = StateNode;
  }
});

// node_modules/xstate/lib/Machine.js
var require_Machine = __commonJS({
  "node_modules/xstate/lib/Machine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StateNode = require_StateNode();
    var environment = require_environment();
    var warned = false;
    function Machine(config, options, initialContext) {
      if (initialContext === void 0) {
        initialContext = config.context;
      }
      return new StateNode.StateNode(config, options, initialContext);
    }
    function createMachine(config, options) {
      if (!environment.IS_PRODUCTION && !("predictableActionArguments" in config) && !warned) {
        warned = true;
        console.warn("It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html");
      }
      return new StateNode.StateNode(config, options);
    }
    exports.Machine = Machine;
    exports.createMachine = createMachine;
  }
});

// node_modules/xstate/lib/model.js
var require_model = __commonJS({
  "node_modules/xstate/lib/model.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib();
    var actions = require_actions();
    var Machine = require_Machine();
    var utils = require_utils();
    function createModel(initialContext, creators) {
      var eventCreators = creators === null || creators === void 0 ? void 0 : creators.events;
      var actionCreators = creators === null || creators === void 0 ? void 0 : creators.actions;
      var model = {
        initialContext,
        assign: actions.assign,
        events: eventCreators ? utils.mapValues(eventCreators, function(fn, eventType) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return _tslib.__assign(_tslib.__assign({}, fn.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false))), {
              type: eventType
            });
          };
        }) : void 0,
        actions: actionCreators ? utils.mapValues(actionCreators, function(fn, actionType) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return _tslib.__assign(_tslib.__assign({}, fn.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false))), {
              type: actionType
            });
          };
        }) : void 0,
        reset: function() {
          return actions.assign(initialContext);
        },
        createMachine: function(config, implementations) {
          return Machine.createMachine("context" in config ? config : _tslib.__assign(_tslib.__assign({}, config), {
            context: initialContext
          }), implementations);
        }
      };
      return model;
    }
    exports.createModel = createModel;
  }
});
export default require_model();
/*! Bundled license information:

xstate/lib/_virtual/_tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=xstate_lib_model.js.map
